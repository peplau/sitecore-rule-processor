<?xml version="1.0" encoding="utf-8" ?>
<!--

Important: You must specify a value for the Sitecore.Cloud.Xdb.DeploymentId setting before you start Sitecore for the first time after you
have configured Sitecore to connect to the xDB Cloud Edition.
 
Purpose: This include file contains configuration settings for connecting to the xDB Cloud Edition.
 
To enable this include file, rename it so that it has a ".config" extension.

 -->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
  <sitecore>
    <settings>
      <!--  DEPLOYMENT ID
            Identifies the xDB Cloud Edition instance that this Sitecore installation should connect to.
            This string must only contain letters and numbers (no whitespace).
            You must specify a value for this setting before you run Sitecore for the first time after you configure Sitecore to use a cloud xDB.
            Default value: "" (not connected to xDB Cloud Edition)
      -->
      <setting name="Sitecore.Cloud.Xdb.DeploymentId" value="" />

      <!-- DEPLOYMENT TYPE
           Allowed values are: 
           Prod
           NonProd
           
           Sitecore will not boot if this setting doesn't match what is retrieved from the xdb service.
           Running a production solution on a non-prod SLA will degrade your overall SLA.
           Running a non-production solution on a production data set will pollute the production data set.
      -->
      <setting name="Sitecore.Cloud.Xdb.DeploymentType" value="NonProd" />
    </settings>
    <httpTransportFactory type="Sitecore.Cloud.Xdb.CloudBasedTransportFactory, Sitecore.Cloud.Xdb" singleInstance="true"/>

    <reporting>
      <remote enabled="true">
        <proxyDataSource type="Sitecore.Analytics.Reporting.Datasources.Remote.RemoteReportDataSourceProxy, Sitecore.Analytics" />
        <paths>
          <Reporting>/~/v75/reporting/remotedatasourceproxy/</Reporting>
          <DefinitionDeployment>/~/v75/reporting/masterdata/datadefinitionservice/</DefinitionDeployment>
        </paths>
      </remote>
    </reporting>

    <aggregation>
      <reportingStorageProviders>
		<primary type="Sitecore.Analytics.Aggregation.SqlReportingStorageProvider, Sitecore.Analytics.Sql" singleInstance="true">
          <patch:delete />
        </primary>
		 <secondary.live type="Sitecore.Analytics.Aggregation.SqlReportingStorageProvider, Sitecore.Analytics.Sql" singleInstance="true">
          <patch:delete />
        </secondary.live>
		<secondary.history type="Sitecore.Analytics.Aggregation.SqlReportingStorageProvider, Sitecore.Analytics.Sql" singleInstance="true">
          <patch:delete />
        </secondary.history>
        <remote type="Sitecore.Analytics.Reporting.DefinitionData.RemoteWriteOnlyDefinitionsStorageProvider, Sitecore.Analytics" singleInstance="true" />
      </reportingStorageProviders>
    </aggregation>

    <hooks>
      <hook type="Sitecore.Cloud.Xdb.DisableAggregation, Sitecore.Cloud.Xdb" patch:after="processor[@type='Sitecore.Analytics.Aggregation.AggregationLoader, Sitecore.Analytics.Aggregation']"/>
      <hook type="Sitecore.Cloud.Xdb.DisableAutomation, Sitecore.Cloud.Xdb" patch:after="processor[@type='Sitecore.Analytics.Automation.Aggregation.SubsystemLoader, Sitecore.Analytics.Automation.Aggregation']"/>
    </hooks>

    <pipelines>
      <initialize>
        <processor type="Sitecore.Cloud.Xdb.UpdateXdbConnectionStrings, Sitecore.Cloud.Xdb" patch:before="processor[@type='Sitecore.Pipelines.Loader.LoadHooks, Sitecore.Kernel']" />
      </initialize>
    </pipelines>
  </sitecore>
</configuration>